cd Documents/CMSC21
git add -all
git commit -m "Lecture 4 Assignment"
git push -u origin main

#include <stdio.h>

int main(){
    int point, i, j, count, current, adjacent
    
    bool road_networks[ROWS][COLUMNS] =
        {1, 1, 0, 0, 0, 1, 0, 0, 0},
        {1, 1, 1, 0, 0, 0, 0, 0, 0},
        {0, 1, 1, 0, 1, 1, 0, 0, 1},
        {0, 0, 0, 1, 1, 0, 0, 0, 0},
        {0, 0, 0, 1, 1, 0, 0, 0, 0},
        {1, 0, 1, 0, 0, 1, 0, 0, 0},
        {1, 0, 0, 1, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 1},
        {0, 0, 0, 0, 0, 0, 0, 1, 1}

    printf("Adjacency Matrix\n");
    for (i = 0; i < ROWS + 1; i++) {
        for (j = 0; j < COLUMNS + 1; j++) {
            if (i == 0 && j == 0) {
                printf("    ");
            }
            else if (i == 0 || j == 0) {
                switch (abs(i-j)) {
                    case 3: 
                    case 4: 
                        printf("[%c] ", 64 + abs(i-j)); break;
                    default: 
                        printf(" %c  ", 64 + abs(i-j)); break;
                }
            }
            else {
                printf("%d", road_networks[i-1][j-1]);
            }
        }
        printf("\n");
    }

    printf("Which point are you located? 0 - A, 1 - B, 2 - C, 3 - D, 4 - E, 5 - F, 6 - G, 7 - H\n");
    scanf("%d", point);
    do{
        if (point < 0 || point > 8) {
            printf("Invalid point address. Please input a valid point address: ");
        }
    } while (point < 0 || point > 8);

    int distance[COLUMNS];
    bool visit[COLUMNS];

    for (i = 0; i < COLUMNS; i++) {
        distance[i] = INT_MAX, visit[i] = false;
    }
    distance[point] = 0;

    for (count = 0; count < COLUMNS - 1; count++) {
        current = minDistance(distance, visit);
        visit[current] = true;
        for (adjacent = 0; adjacent < COLUMNS; adjacent++) {
            if (!visit[adjacent]
                && road_networks[current][adjacent]
                && distance[current] != INT_MAX
                && distance[current] + road_networks[current][adjacent] < distance[adjacent]) {
                    distance[adjacent] = distance[current] + road_networks[current][adjacent];
            }
        }
    }

    if (point == 2 || point == 3) {
        printf("At point: %c.\n", 65 + point);
        printf("point %c is a charging station\n", 65 + point);
    }
    else if (distance[2] == INT_MAX && distance[3] == INT_MAX) {
        printf("At point: %c.\n", 65 + point);
        printf("No near charging stations.\n");
    }
    else {
        printf("At point: %c.\n", 65 + point);
        printf("point: %c arrived to charging station.\n", 65 + point, 67 + (distance[2] > distance[3]));
    }

    return 0;
}
#include <stdio.h>

int main(void)
{
    int i;
    i = 1;
    while (i <= 128) {
        printf("%d ", i);
        i *= 2;
    }
    return 0;
}
#include <stdio.h>

int main(void)
{
    int i;
    i = 1;
    while (i < 10) {
        printf("%d ", i);
        i *= 2;
    }
    return 0;
}

// #include <stdio.h>

// int main(void)
// {
//     int i;
//     i = 1;
//     for (i = 1;i < 10; i++) {
//         printf("%d ", i);
//         i *= 2;
//     }
//     return 0;
// }

// #include <stdio.h>

// int main(void)
// {
//     int i;
//     i = 1;
//     do{
//         printf("%d ", i);
//         i *= 2;
//     }
//     while(i < 10);
    
//     return 0;
// }
#include <stdio.h>

int main(void)
{
    int i;
    i = 1;
    for (i = 1;i < 10; i) {
        printf("%d ", i);
        i *= 2;
    }
    return 0;
}
#include <stdio.h>

int main(){
    int exponent, i, base=2;
    long double power=1;

    printf("Enter the exponent: ");
    scanf("%d", &exponent);

    for(i = 1; i <= exponent; i++){
        power *= base;
    }
    printf("%d ^ %d = %.0Lf", base, exponent, power);
}
#include <stdio.h>

int main(){
    int i, j, month, week;

    printf("Enter number of days in a month: ");
    scanf("%d", &month);
    printf("Enter the starting day of the week (1=Sun, 7=Sat): ");
    scanf("%d", &week);

    if (month == 28 || month == 29 || month == 30 || month 31){
        for (i = 1; i < week; i++){
            print("   ");
        }
        for (j = 1; j <= month; j++){
            printf("%3d", j);
            if (i % 7 == 0){
                printf("\n");
            }
        }
    }
    else {
        printf("Invalid number of days in a month.")
    }
    return 0;
}
#include <stdio.h>
#include <stdbool.h>

#define NUM_PATHWAYS ((int) (sizeof(pathway) / sizeof(pathway[0])))

int main(){
    bool pathway[8] = {true, false, true};

    for(int i = 0; i < NUM_PATHWAYS; i++){
        if (pathway[i]){
            printf("pathway[%d] is open \n", i);
        }else{
            printf("pathway[%d] is close \n", i);
        }
    }
    return 0;
}
